<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Use cool stuff to render a graph | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2010" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2010">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="use_cool_stuff_to_render_a_graph"></a>Use cool stuff to render a graph</h1>

<p>Earlier this year I presented one of my project: 
<a href="http://lumberjaph.net/graph/2010/03/25/github-explorer.html">Github Explorer</a>.
The idea was to graph the various communities on github, and show how peoples
work together, by country and languages. I've started to work on a new version,
and this time I want to let people generate their own graph.</p>
<p>In this article I'll present a simple version of what I'm working on.
Everything will be published as open source software in a few weeks.</p>
<h2><a name="first__the_conclusion"></a>First, the conclusion</h2>

<p>Let's see a graph first (and sorry if you're reading this with a smartphone!).</p>
<iframe scrolling="no" style="border:solid 4px #ccc;height:450px;width:600px;" src="/demo/graph/github-graph.html"></iframe>

<p>This is not the kind of graph I want to end up with (this one is buggy, some
profiles are displayed twice for instance), but it gives you a good idea of what I
want to achieve. Check the content of the iframe to see the html and javascript
code.</p>
<h2><a name="the_data"></a>The data</h2>

<p>I'm collecting data using the GitHub API, and use 
<a href="http://www.mongodb.net/">mongodb</a> for storage, using the
<a href="http://search.cpan.org/perldoc?Dancer::Plugin::Mongo">Dancer::Plugin::Mongo</a>
plugin. I've got two collections:</p>
<ul>
<li><a name="item_profiles"></a><b>profiles</b>
</li>
<li><a name="item_relations"></a><b>relations</b>
</li>
</ul>
<p>For each profile that follows another profile, a relation is created. Each time
someone has worked with someone else, another relation is created. So, if you
follow <a href="http://github.com/sukria">sukria</a> on GitHub, and you've already contributed to Dancer, 
there is a relation of weight 2 between you and him.</p>
<h2><a name="generate_the_graph_server_side"></a>Generate the graph server side</h2>

<p>I've built a simple Dancer website that will be used to display various
statistics and informations about the graphs I'm going to create.</p>
<p>Let's create a route that renders a simple HTML page with some javascript:</p>
<pre class="prettyprint">get '/view/graph/:name' =&gt; sub {
    template 'graph', {name =&gt; params-&gt;{name}}, {layout =&gt; undef};
};</pre>

<p>I set the layout to <code>undef</code> since I only want the graph and nothing else.</p>
<p>The content for our template is mostly some javascript that will fetch the
content of your graph from an API. The important lines are:</p>
<pre class="prettyprint">var dataURL = "/api/graph/&lt;% name %&gt;";
var JSONdata = $.ajax({ type: "GET", url: dataURL, async: false }).responseText;
var graph = JSON.parse(JSONdata);</pre>

<p>This will query our JSON API to get a graph.</p>
<p>Now, let's see our API:</p>
<pre class="prettyprint">set serializer =&gt; 'JSON';

get '/api/graph/:profile' =&gt; sub {
    my $profile = params-&gt;{profile};

    my $graph = GitHub::Explorer::Graph-&gt;new();

    $graph-&gt;add_node( { nodeName =&gt; $profile, id =&gt; 0, group =&gt; 1 } );
    
    _add_nodes($graph, ...);
    _add_links($graph, ...);

    my @nodes = $graph-&gt;all_nodes();
    my @links = $graph-&gt;all_links();
    
    return {
        nodes =&gt; \@nodes,
        links =&gt; \@links,
    };
};</pre>

<p>Let's look at this route. This API will only render JSON, since it's what the
javascript expects. The route matches for a given profile. The first thing it does
is to create a <b>Graph</b> object, that implements a simple interface (<b>add_node</b>,
<b>add_edge</b>, <b>all_nodes</b>, <b>all_edges</b>, ...). We create a first node with the
requested profile. Now, for each relation, we fetch from mongo the name of
the profile.</p>
<p>The <b>_add_nodes</b> method looks something like the following:</p>
<pre class="prettyprint">sub _add_nodes {
    ...
    my $rs = mongo-&gt;github-&gt;relations-&gt;find($query);

    while ( my $r = $rs-&gt;next ) {
        # add node to existing graph
    }
}</pre>

<p>Here I use <b>Dancer::Plugin::Mongo</b>. It imports the <b>mongo</b> keyword; <b>github</b>
is the name of my database; <b>relations</b> is the name of the collection in the
database. To finish, I call the <b>find</b> method with my query, to fetch the
informations I need.</p>
<p>The <b>_add_links</b> function is similar. Now that we have all our informations,
we can ask for a list of nodes and edges, and return them to the javascript.</p>
<p>For the graph rendering, I use the amazingly great 
<a href="http://vis.stanford.edu/protovis/">Protovis library</a>.</p>
<h2><a name="caching"></a>Caching</h2>

<p>Fetching the informations from MongoDB and generating the graph object can be
really slow, depending on the size of the requested graph. A good idea is to
cache the result before sending it back to the client. For this, we can use
<a href="http://search.cpan.org/perldoc?Dancer::Plugin::Memcached">Dancer::Plugin::Memcached</a>.</p>
<p>All I have to do is to change the route to something like:</p>
<pre class="prettyprint">get '/api/graph/:profile' =&gt; sub {
    my $profile = params-&gt;{profile};

    my $key = "gh_graph_".$profile;
    if (my $cached_graph = memcached_get($key)) {
        return $cached_graph;
    }

    my $graph = GitHub::Explorer::Graph-&gt;new();

    ...

    my $finalized_graph = {
        nodes =&gt; \@nodes,
        links =&gt; \@links,
    };

    memcached_store($key, $finalized_graph);
    return $finalized_graph;
};</pre>

<p>You can see the introduction of two new keywords: <b>memcached_get</b> and
<b>memcached_store</b>.</p>
<h2><a name="conclusion__bis_"></a>Conclusion (bis)</h2>

<p>In this article I've shown two new plugins: <b>Dancer::Plugin::Mongo</b> (by Adam
Taylor) and <b>Dancer::Plugin::Memcached</b> (by squeeks), and a nice Javascript
library : <b>Protovis</b>.</p>
<p>I'll continue to work on this app in the following months, and you can expect to
see the code (and use the application) hopefully very soon.</p>
<h2><a name="author"></a>Author</h2>

<p>This article has been written by Franck Cuny for the Perl Dancer Advent
Calendar 2010.</p>
<h2><a name="copyright"></a>Copyright</h2>

<p>Copyright (C) 2010 by franck cuny <code>&lt;franck@lumberjaph.net&gt;</code></p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
