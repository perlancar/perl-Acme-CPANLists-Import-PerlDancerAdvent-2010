<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Writing REST web services with Dancer | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2010" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2010">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="writing_rest_web_services_with_dancer"></a>Writing REST web services with Dancer</h1>

<p>It's really easy to write REST web services with Dancer.</p>
<p>A REST application is defined by:</p>
<ul>
<li><a name="item_a_route_to_a_resource"></a><b>a route to a resource</b>
</li>
<li><a name="item_an_HTTP_verb"></a><b>an HTTP verb</b>
</li>
<li><a name="item_a_format"></a><b>a format</b>
</li>
</ul>
<h2><a name="serializers"></a>Serializers</h2>

<p>Dancer comes with some helper functions, in order to help you to serialize your
Perl data structure to something like JSON or XML.</p>
<p>The core provides serializers for:</p>
<ul>
<li><a name="item__b_JSON__b____code_to_json__code__and__code_from_json__code__"></a><b><b>JSON</b> (<code>to_json</code> and <code>from_json</code>)</b>
</li>
<li><a name="item__b_XML__b____code_to_xml__code__and__code_from_xml__code__"></a><b><b>XML</b> (<code>to_xml</code> and <code>from_xml</code>)</b>
</li>
<li><a name="item__b_YAML__b____code_to_yaml__code__and__code_from_yaml__code__"></a><b><b>YAML</b> (<code>to_yaml</code> and <code>from_yaml</code>)</b>
</li>
</ul>
<p>With these serializers, you can write:</p>
<pre class="prettyprint">get '/user/:id' =&gt; sub {
    my $user = $schema-&gt;resultset('Users')-&gt;find( params-&gt;{id} );
    content_type 'application/json';
    return to_json { id =&gt; params-&gt;{id}, name =&gt; $user-&gt;name };
};</pre>

<h2><a name="let_dancer_handle_the_serialization"></a>Let Dancer handle the serialization</h2>

<h3><a name="using_json"></a>Using JSON</h3>

<p>Now that we've seen how to do serialization manually, lets make Dancer do the
work for us.</p>
<p>You can configure your application to have a default serializer:</p>
<pre class="prettyprint">set serializer =&gt; 'JSON';</pre>

<p>Now, you can define a route like this:</p>
<pre class="prettyprint">get '/user/:id' =&gt; sub {
    my $id   = params-&gt;{id};
    my $user = $schema-&gt;resultset('Users')-&gt;find($id);
    return { id =&gt; $id, name =&gt; $user-&gt;name };
};</pre>

<p>As you can see, we no longer need to call the <code>content_type</code> and <code>to_json</code>
functions. When you set a default serializer and your route returns an arrayref
or hashref, Dancer will check if you have a default serializer defined. If that
is the case, it will serialize the response to the appropriate format and set
the correct content type.</p>
<h3><a name="let_the_user_select_the_format_"></a>Let the user select the format.</h3>

<p>If you have installed the required dependencies for using all the supported
serializers by Dancer (<a href="https://metacpan.org/module/XML::Simple">XML::Simple</a>, <a href="https://metacpan.org/module/YAML">YAML</a> and <a href="https://metacpan.org/module/JSON">JSON</a>), you can even let
the user choose in which format he prefers to have the content of the request.
For this, you'll need to set the serializer to <b>mutable</b>
(<a href="https://metacpan.org/module/Dancer::Serializer::Mutable">Dancer::Serializer::Mutable</a>. From now on, you can select your format by
defining the correct value in the HTTP header of your request (<b>Content-Type</b>
when doing a POST or PUT operation, and <b>Accept-Type</b> for GET and DELETE).</p>
<p>So, if we take our previous example, by setting the serializer to <b>mutable</b>,
we can do the following:</p>
<pre class="prettyprint">$ curl http://localhost:5000/1
{"name":"franck","id":"1"}

$ curl -H 'Accept-Type: text/x-yaml' http://localhost:5000/1
---
id: 1
name: franck

$ curl -H 'Accept-Type: text/xml' http://localhost:5000/1
&lt;data name="franck" id="1" /&gt;</pre>

<h2><a name="dancer__plugin__rest"></a>Dancer::Plugin::REST</h2>

<p>There is an excellent plugin available to help you to write a REST application:
<a href="https://metacpan.org/module/Dancer::Plugin::REST">Dancer::Plugin::REST</a>. With this one, you'll be able to declare routes to
access resources, but also declare how you want to handle the format.</p>
<h3><a name="format"></a>Format</h3>

<p>As we have seen, you can already define the format by setting the <b>serializer</b>
option to a certain value (JSON, YAML, mutable, etc.). The plugin add another
way: by appending the format to your request. This mean you can declare this
kind of route:</p>
<pre class="prettyprint">prepare_serializer_for_format;

get '/user/:id.:format' =&gt; sub {
    my $user = $schema-&gt;resultset('Users')-&gt;find(params-&gt;{id});
    return { id =&gt; params-&gt;{id}, name =&gt; $user-&gt;name };
};

$ curl http://localhost:5000/1.json
{"name":"franck","id":"1"}

$ curl -H 'Accept-Type: text/xml' http://localhost:5000/1.xml
&lt;data name="franck" id="1" /&gt;</pre>

<h3><a name="resources"></a>Resources</h3>

<p>As stated at the beginning of the article, with REST you defined routes to
access resources. So let's do this:</p>
<pre class="prettyprint">resource user =&gt; 
    'get'    =&gt; \&amp;on_get_user,
    'create' =&gt; \&amp;on_create_user,
    'delete' =&gt; \&amp;on_delete_user,
    'update' =&gt; \&amp;on_update_user;

sub on_get_user {
    ...
    status_ok( { user =&gt; $users-&gt;id } );
}

sub on_create_user {
    ...
    status_created( { user =&gt; $user-&gt;id } );
}

...</pre>

<h3><a name="helpers"></a>Helpers</h3>

<p>The plugin add also some helpers to return an appropriate HTTP status to your
request.</p>
<pre class="prettyprint">post '/user/' =&gt; sub {
    my $user = $schema-&gt;resultset('Users')-&gt;create(...);
    status_created( { id =&gt; $user-&gt;id, name =&gt; $user-&gt;name } );
};</pre>

<p>This will return a new HTTP response with a status of 201.</p>
<h2><a name="credits"></a>Credits</h2>

<p>Most of the work done on the serializers have been inspired by the excellent
plugin <a href="https://metacpan.org/module/Catalyst::Action::REST">Catalyst::Action::REST</a>. Thanks to all of the authors of this module.</p>
<h2><a name="author"></a>Author</h2>

<p>This article has been written by Franck Cuny for the Perl Dancer Advent
Calendar 2010.</p>
<h2><a name="copyright"></a>Copyright</h2>

<p>Copyright (C) 2010 by Franck Cuny <code>&lt;franck@lumberjaph.net&gt;</code>.</p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
