<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Dive into Dancer's internals | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2010" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2010">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="dive_into_dancer_s_internals"></a>Dive into Dancer's internals</h1>

<p>This article is intended to describe how major parts of Dancer are designed, in
order to help developers understand better the way it works.</p>
<p>We'll see that we can basically split Dancer into four distinct scopes: the
<b>DSL</b>, the <b>core</b>, <b>engines</b> and <b>plugins</b>. We'll see what are the differences between
those parts and what are the concepts behind them.</p>
<p>If you intend to contribute to Dancer, this article should be a good start to
clarify how things fit together.</p>
<h2><a name="a_word_about_the_concept_behind_dancer"></a>a word about the concept behind Dancer</h2>

<p>As you may have read already, Dancer was first inspired by
<a href="http://www.sintrarb.com">Sinatra</a>. It quickly evolved towards a complete
micro-framework with its own personality and taste.</p>
<p>The idea that remained our major guideline though is the <i>micro</i> concept: we
want Dancer to remain lightweight. We want the user to be able to configure as
little as possible and get things working with as little concepts to master as
possible, avoiding unnecessary confusion.</p>
<p>This quest of expressiveness and simplicity leads to a particular design I'll
try to explain here.</p>
<h2><a name="the_dsl"></a>The DSL</h2>

<p>The first visible layer of Dancer is the set of keywords that are exported to
the application that <i>use</i>s <a href="https://metacpan.org/module/Dancer">Dancer</a>.</p>
<p>Those keywords let the user build their application. <code>get</code>, <code>redirect</code>,
<code>params</code> or <code>request</code> are some of them. The main goal of Dancer is to provide
the user with a new tiny language that is web-application-oriented, this is what
we call a DSL (<i>Domain Specific Language</i>), a language that pertains to a
specific concept, goal or domain.</p>
<p>Dancer took an original path regarding the common Perl culture practices: the
framework does not provide a direct Object-Oriented layer to the user. In a
route handler, you don't unroll the <code>@_</code> variable. In a Dancer application,
everything is declarative. Doing it this way allows for very expressive
instructions and this is the reason why so many people liked Dancer in the first
place. With Dancer every bit you write is necessary and it helps you
tremendously avoid repetitive code.</p>
<p>As this set of keywords is the very first thing a user will have to use to build
a web application with Dancer, it's very important for it to be succinct,
expressive and powerful. On the other hand, it should not become a huge bag of
keywords as time goes. We don't want this set to be oversized, as the saying
goes: <i>Less is more</i>. That's why I'm very picky when someone suggests to add a
new keyword to the core DSL.</p>
<p>Those keywords are intended to be the basic rock upon which your application is
built. But of course, this set should be extendable, that is where plugins come
into play.</p>
<h2><a name="the_core"></a>The Core</h2>

<p>The core is all that Dancer needs to register route handlers and dispatch any
request to one of them.</p>
<p>The core also contains classes that represent logical entities like
<a href="https://metacpan.org/module/Dancer::Request">requests</a> or <a href="https://metacpan.org/module/Dancer::Route">route handlers</a>.</p>
<p>In Dancer's implementation, anything is contained in a <a href="https://metacpan.org/module/Dancer::App">Dancer::App</a> object
(yes, you can have multiple applications within the same application). An
application object provides a route registry, where we can find <a href="https://metacpan.org/module/Dancer::Route">Dancer::Route</a>
objects, that represents the route handlers.</p>
<p>The application itself is powered by a <a href="https://metacpan.org/module/Dancer::Handler">Dancer::Handler</a> that takes a
<a href="https://metacpan.org/module/Dancer::Request">Dancer::Request</a> and tries to match it against all route handlers of the
current application. When a route handler is found, its code is executed, and
the handler renders the result as a <a href="https://metacpan.org/module/PSGI">PSGI</a> response.</p>
<p>This is the scope of the core: powering an application, registering route
handlers and providing the tools for finding the appropriate handler for a given
request.</p>
<p>Anything outside of this scope should be handled either by an engine or a
plugin.</p>
<p>So what is the core actually, if all the important parts are handled by engines
and if most of the specific needs should be addressed by plugins?
Well, the core is what you see when you look at Dancer's soul: it's a
dispatcher provided as a DSL.</p>
<p>A dead-simple dispatcher whose only real internal job is to register route
handlers with a powerful syntactic sugar.</p>
<h2><a name="engines"></a>Engines</h2>

<p>We also introduced another layer, between the core and plugins, that we call
engines. Indeed, there are some very common use-cases we wanted to address
within Dancer without touching the core, and with more standardisation than
simple plugins can provide. Those fields are: loggers, template engines,
serializers and session engines.</p>
<p>Engines were introduced quickly in Dancer's development. The main idea behind
this concept was to allow Dancer to be as extensible as possible.</p>
<p>For instance, the engine design allows Dancer to handle different template or
session engines transparently. You can change the backend you use with a simple
configuration update.</p>
<p>Basically, any engine in Dancer is built upon the Abstract Class design
pattern: if you want to write your own engine for Dancer, all you have
to do is to <i>implement</i> the right abstract class.</p>
<p><a href="http://blogs.perl.org/user/Ovid/">Ovid</a> explained on his blog
<a href="http://blogs.perl.org/users/ovid/2010/11/perl101-encapsulation-via-protected-abstract-methods.html">the concept of the abstract-class pattern</a>,
the article is part of his Perl 101 series and explained the concept very well.</p>
<p>In Dancer you'll find four kinds of engine:</p>
<ul>
<li><a name="item__a_href__https___metacpan_org_module_Dancer__Logger__Abstract__Dancer__Logger__Abstract__a_"></a><b><a href="https://metacpan.org/module/Dancer::Logger::Abstract">Dancer::Logger::Abstract</a></b>
</li>
<li><a name="item__a_href__https___metacpan_org_module_Dancer__Session__Abstract__Dancer__Session__Abstract__a_"></a><b><a href="https://metacpan.org/module/Dancer::Session::Abstract">Dancer::Session::Abstract</a></b>
</li>
<li><a name="item__a_href__https___metacpan_org_module_Dancer__Template__Abstract__Dancer__Template__Abstract__a_"></a><b><a href="https://metacpan.org/module/Dancer::Template::Abstract">Dancer::Template::Abstract</a></b>
</li>
<li><a name="item__a_href__https___metacpan_org_module_Dancer__Serializer__Abstract__Dancer__Serializer__Abstract__a_"></a><b><a href="https://metacpan.org/module/Dancer::Serializer::Abstract">Dancer::Serializer::Abstract</a></b>
</li>
</ul>
<p>For instance, writing a new template engine would be that simple:</p>
<pre class="prettyprint">package Dancer::Template::MyGreatEngine;

# we implement the 'Template' interface
use base 'Dancer::Template::Abstract';

sub init {
    # we can do init stuff here
    # like creating our template renderer object 
}

sub render {
    my ($self, $template, $tokens) = @_;
    # we just need to process $template with $tokens and return 
    # the expanded string
}

1;</pre>

<p>The same idea goes for session, logger and serializer.</p>
<p>Thanks to this design, Dancer has already many template, session and logger
backends available on the CPAN. This showcases one of the ideas behind Dancer's
philosophy: being as open as possible for the developer and for the Perl
community.</p>
<p>The developer has the freedom to choose virtually any template or logger engine
she likes, the community can contribute easily to the project, thanks to a
portable design.</p>
<h2><a name="plugins"></a>Plugins</h2>

<p>Finally, we have plugins. As explained in a previous article, plugins are the
most simple way to extend Dancer on a particular need. If you plan to
contribute code to Dancer, you probably want to consider writing a plugin.</p>
<p>A plugin can do anything that a regular Dancer application can; but on top of
that, it can alias actions under a name which will be added to the DSL.</p>
<p>A good plugin example is <a href="https://metacpan.org/module/Dancer::Plugin::Database">Dancer::Plugin::Database</a>: a keyword <code>database</code> is
added to the DSL, providing a valid <a href="https://metacpan.org/module/DBI">DBI</a> handle over the database specified
via Dancer's configuration.</p>
<p>Writing a plugin for Dancer is a piece of cake:</p>
<pre class="prettyprint">package Dancer::Plguin::MyGreatPlugin;
    
# we want to import Dancer's DSL
use Dancer ':syntax';

# we want tools to build our plugin
use Dancer::Plugin;

register 'some_word' =&gt; sub {
    # so something
};

register_plugin;</pre>

<h2><a name="conclusion"></a>Conclusion</h2>

<p>That's it, you know all the main ideas behind Dancer's design, you should now
better understand <i>where</i> your contribution should go, if you want to provide
some.</p>
<p>The next step for us is now to design a whole new layer, whose main job will be
to provide a unified access to the internals. We'll probably call that layer
<code>Dancer::Internal</code>. The idea will be to provide a full access to all the
meta-information of a Dancer application, this will allows for more power and
possibilities for plugins and engines.</p>
<p>This will be done through a process of refactoring that will occur in the
Dancer 1.3xx releases. When finalised, it will be released as a 1.4 version.
This is our major target for this release.</p>
<h2><a name="author"></a>Author</h2>

<p>This article has been written by Alexis Sukrieh for the Perl Dancer advent
calendar 2010.</p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
