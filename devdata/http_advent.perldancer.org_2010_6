<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Testing a Dancer application | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2010" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2010">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="testing_a_dancer_application"></a>Testing a Dancer application</h1>

<p>In <a href="http://advent.perldancer.org/2010/5">the previous article</a>, we saw how to
develop a plugin. We have written our example as a plugin named
<a href="https://metacpan.org/module/Dancer::Plugin::MobileDevice">Dancer::Plugin::MobileDevice</a>. In this article We'll see how to test it.</p>
<p>As testing a plugin is pretty much the same thing as testing a complete
application, you will learn in this article how to use the <a href="https://metacpan.org/module/Dancer::Test">Dancer::Test</a>
module for building a good test suite for a Dancer application.</p>
<h2><a name="why_testing"></a>Why testing?</h2>

<p>Writing a plugin for the Dancer ecosystem is a great thing to do; It's a
very good way to contribute to the project, but writing the
plugin is not enough, you should write tests to validate your plugin
before releasing it to the CPAN.</p>
<p>We will now look at how easy it is to do that and we'll write a test suite to
make sure everything provided by the plugin works as expected. Remember
that tests are still code. Take quality seriously and your software
will be better.</p>
<h3><a name="the__code_is_mobile_device__code__keyword"></a>The <code>is_mobile_device</code> keyword</h3>

<p>Let's start by testing that our helper works as expected, with
<a href="https://metacpan.org/module/Dancer::Test">Dancer::Test</a> this is easy to do:</p>
<pre class="prettyprint"># t/01-is_mobile_device.t
use strict;
use warnings;
use Test::More import =&gt; ['!pass'];</pre>

<p>Note that we ask not to import <a href="https://metacpan.org/module/Test::More">Test::More</a>'s <code>pass</code> keyword.
It's already exported by Dancer and we don't want our test script to
produce a warning.</p>
<p>First of all, we need a basic app that uses our plugin, we'll define
it within the test script, inside a lexical block:</p>
<pre class="prettyprint">{
    use Dancer;
    use Dancer::Plugin::MobileDevice;

    get '/' =&gt; sub {
        return is_mobile_device;
    };
}</pre>

<p>OK, we have a basic app that just loads the plugin and defines one
route handler which only returns the value of <code>is_mobile_device</code>.
That's enough, we can now write the tests.</p>
<pre class="prettyprint">use Dancer::Test;</pre>

<p><a href="https://metacpan.org/module/Dancer::Test">Dancer::Test</a> provides a complete set of test functions specialized for
testing a Dancer application. Here we'll use the function
<code>response_content_is</code> which takes a request object (basically an
array with a method and a path) and a value, and makes sure the route
handler returns a response that is the same as the expected value.</p>
<p>We'll define a bunch of user agent strings we consider "mobile devices"
and make sure the flag is set appropriately for them:</p>
<pre class="prettyprint">my @mobile_devices = qw(Android iPhone PalmOS);

for my $md (@mobile_devices) {
    $ENV{HTTP_USER_AGENT} = $md;
    response_content_is [GET =&gt; '/'], 1, "agent $md is a mobile device";
}</pre>

<p>And we finally add a non-mobile string:</p>
<pre class="prettyprint">$ENV{HTTP_USER_AGENT} = 'Mozilla';
response_content_is [GET =&gt; '/'], 0, "Mozilla is not a mobile device";</pre>

<p>Let's run the test:</p>
<pre class="prettyprint">$ perl -Ilib t/01-is_mobile_device.t
1..4
ok 1 - agent iPhone is a mobile device
ok 2 - agent Android is a mobile device
ok 3 - agent PalmOS is a mobile device
ok 4 - Mozilla is not a mobile device</pre>

<p>Great! We know now for sure that <code>is_mobile_device works</code>, that's a good
start!</p>
<h3><a name="the_default_template_token"></a>The default template token</h3>

<p>We now want to make sure all of our template calls got the
<code>is_mobile_device</code> token. To do that, our test application will now
only provide a route handler that calls <code>template</code>. Obviously, for
this to work we need... a template to process. Dancer::Test takes
care for us to initialize the views directory to <i>t/views</i>, so we can
provide our test script with some views without polluting the root
directory of our distribution.</p>
<p>So we first create a view:</p>
<pre class="prettyprint">$ mkdir t/views
$ echo "is_mobile_device: &lt;% is_mobile_device %&gt;" &gt; t/views/index.tt</pre>

<p>The view is very basic, it just shows the interpolation of the
<code>is_mobile_device</code> token. Let's use it in our test script.</p>
<pre class="prettyprint">{
    use Dancer;
    use Dancer::Plugin::MobileDevice;

    get '/' =&gt; sub {
        template 'index', {}, { layout =&gt; undef };
    };
}</pre>

<p>Same as previously, we define a route handler that does just what we
need. You'll see that we've given some extra options to the
<code>template</code> keyword in order to disable the layout. Indeed, our plugin
automatically sets a layout for mobile clients and we don't want to
see that for the moment.</p>
<p>The second argument given to <code>template</code> is an empty hash which is
actually the tokens hash. It should have been populated by our plugin
under the hood and we'll make sure of that.</p>
<pre class="prettyprint">use Dancer::Test;

$ENV{HTTP_USER_AGENT} = 'Android';
response_content_is [GET =&gt; '/'],
    "is_mobile_device: 1\n",
    "token is_mobile_device is present and valid for Android";

$ENV{HTTP_USER_AGENT} = 'Mozilla';
response_content_is [GET =&gt; '/'],
    "is_mobile_device: 0\n",
    "token is_mobile_device is present and valid for Mozilla";</pre>

<p>Let's run the test to make sure everything is fine:</p>
<pre class="prettyprint">$ perl -Ilib t/02-tokens.t
1..2
ok 1 - token is_mobile_device is present and valid for Android
ok 2 - token is_mobile_device is present and valid for Mozilla</pre>

<p>Cool! We now have one more thing to test: making sure the layout
changes appropriately, the job of our final test script.</p>
<h3><a name="the_dynamic_layout"></a>The dynamic layout</h3>

<p>In this final test we want to be sure the layout is changed to 'mobile'
whenever a mobile device is served, and that the original layout is
reset afterwards (whether it was defined or not).</p>
<p>To do that we'll use the same technique as before, but this time
with the layouts:</p>
<pre class="prettyprint">$ mkdir t/views/layouts
$ echo -e "mobile:\n&lt;% content %&gt;" &gt; t/views/layout/mobile.tt
$ echo -e "main:\n&lt;% content %&gt;" &gt; t/views/layout/main.tt</pre>

<p><i>(or use your favourite editor to create our layout files)</i></p>
<p>We now have our layouts waiting to be used in the <code>t/views/layouts</code>
directory, let's use it.</p>
<pre class="prettyprint">{
    use Dancer;
    use Dancer::Plugin::MobileDevice;

    get '/' =&gt; sub {
        template 'index';
    };
}</pre>

<p>Just a basic route handler, like before, but this time if a layout is
set, we'll use it.</p>
<p>First, we want to test the behaviour of the app when no layout is set:</p>
<pre class="prettyprint">use Dancer::Test;

$ENV{HTTP_USER_AGENT} = 'Android';
response_content_like [GET =&gt; '/'],
    qr{mobile\nis_mobile_device: 1}ms,
    "mobile layout is set for mobile agents";

$ENV{HTTP_USER_AGENT} = 'Mozilla';
response_content_is [GET =&gt; '/'],
    "is_mobile_device: 0\n",
    "no layout for non-mobile agents";</pre>

<p>And then, when a layout is manually set by the user:</p>
<pre class="prettyprint">set layout =&gt; 'main';

$ENV{HTTP_USER_AGENT} = 'Android';
response_content_like [GET =&gt; '/'],
    qr{mobile\nis_mobile_device: 1}ms,
    "mobile layout is set for mobile agents";

$ENV{HTTP_USER_AGENT} = 'Mozilla';
response_content_like [GET =&gt; '/'],
    qr{main\nis_mobile_device: 0}ms,
    "main layout for non-mobile agents";</pre>

<p>Let's see if everything works:</p>
<pre class="prettyprint">$ perl -Ilib t/03-layouts.t
ok 1 - mobile layout is set for mobile agents
ok 2 - no layout for non-mobile agents
ok 3 - mobile layout is set for mobile agents
ok 4 - main layout for non-mobile agents</pre>

<p>Great, everything works as expected!</p>
<h2><a name="conclusion"></a>Conclusion</h2>

<p>Our plugin is now covered by the test suite we've written, and we can
publish it to the CPAN. Taking a step further, we could run coverage
test with <a href="https://metacpan.org/module/Devel::Cover">Devel::Cover</a> in order to make sure our test suite goes
through all the possible paths but that's beyond the scope of this
article.</p>
<h2><a name="author"></a>Author</h2>

<p>This article has been written by Alexis Sukrieh.</p>
<h2><a name="copyright"></a>Copyright</h2>

<p>Copyright (C) 2010 by Alexis Sukrieh <code>&lt;sukria@sukria.net&gt;</code></p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
