<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Writing a new Dancer logger backend | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2010" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2010">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="writing_a_new_dancer_logger_backend"></a>Writing a new Dancer logger backend</h1>

<p>As you may have noticed by now, it's pretty simple to write backends to Dancer.
This time we'll be writing a logger backend.</p>
<h2><a name="how_do_loggers_work"></a>How do loggers work?</h2>

<p>When Dancer passes all the information it wants (or is asked by you) to log, it
will pass it on to the logger class which will then use the picked backend to
actually do the correct thing with the information (such as presenting it on the
screen or saving it to a file).</p>
<p>Dancer already has a few logging backends, such as:</p>
<ul>
<li><a name="item_Console"></a><b>Console</b>
<p>The new default for development environment, showing all the errors in the
console from which you started the application. This helps you see everything
right there on your screen while developing instead of making you check log
files.</p>
</li>
<li><a name="item_File"></a><b>File</b>
<p>The default for most production environments, saving all the information in a
chosen specific log file. This is also the default behavior with many web
servers such as Apache.</p>
</li>
<li><a name="item_Syslog"></a><b>Syslog</b>
<p>This logger sends your message to the system logger, allowing for collection,
storage and indexing your information along with the system information. This
is used in heavy production environments to centralized all the logging data
from machines to a major location which then uses it to monitor the servers and
provide statistic information.</p>
</li>
</ul>
<p>There are a few more loggers available on CPAN that you can download and
configure your application to use. Feel free to explore.</p>
<h2><a name="deciding_on_the_logger_backend"></a>Deciding on the logger backend</h2>

<p>While writing log messages to a file is what most people do, that's just boring.
Let's try to do something more interesting with <b>our</b> log messages!</p>
<p>Do you like spinners? Of course you do, everyone does! Let's make a log backend
that simply runs a spinner on our console. Every log message that comes in will
make the spinner advance a bit.</p>
<h2><a name="module_skeleton"></a>Module skeleton</h2>

<p>This should be the simplest skeleton, including just the required modules:</p>
<pre class="prettyprint">package Dancer::Logger::Spinner;

use strict;
use warnings;

use base 'Dancer::Logger::Abstract';

sub _log {
    ...
}

1;</pre>

<p>If you've ever developed a Dancer engine or plugin, you'd notice that Dancer
makes usage of abstract base classes. This ensures you implement the correct
methods and helps you enforce present and future portability with Dancer itself.
It also makes our module object oriented.</p>
<h2><a name="methods"></a>Methods</h2>

<p>There is only one subroutine we need to implement for our logger:</p>
<ul>
<li><a name="item__log"></a><b>_log</b>
<p>This subroutine does the work. It gets two parameters: the level of the logging
and the message itself. This helps you determine how important the message is.</p>
<p>For our spinner, since we want to make it rock as much as possible, any message
counts as another spin, so we won't differentiate between different levels.</p>
<pre class="prettyprint">sub _log {
    my ( $self, $level, $message ) = @_;
    $self-&gt;advance_spinner();
}</pre>

<p>Of course, if we aren't using the message level or the message itself, why are
we expanding it out of <code>@_</code>? Just to show how it works. We could effectively
write it the same as such:</p>
<pre class="prettyprint">sub _log {
    my $self = shift;
    $self-&gt;advance_spinner();
}</pre>

</li>
</ul>
<p>Of course we haven't really written the <code>advance_spinner</code> method yet. We're
also missing one important thing, the initialization of the spinner, the
characters used by it and the counter we'll use to keep track of the array of
characters.</p>
<p>We can use the <code>init</code> method in the base class we inherited 
(<a href="https://metacpan.org/module/Dancer::Logger::Abstract">Dancer::Logger::Abstract</a>, remember?) to take care of all these things at
initialization.</p>
<pre class="prettyprint">sub init {
    my $self = shift;
    $self-&gt;{'spinner_chars'} = [ '\\', '|', '/', '-', 'x' ];
    $self-&gt;{'spinner_count'} = 0;
}</pre>

<p>Now we need to implement the <code>advance_spinner</code> subroutine:</p>
<pre class="prettyprint">sub advance_spinner {
    my $self  = shift;
    my $count = $self-&gt;{'spinner_count'};
    my @chars = @{ $self-&gt;{'spinner_chars'} };

    # these chars lifted from Brandon L. Black's Term::Spinner
    print STDERR "\010 \010";
    print STDERR $chars[$count];

    # if we reached over the array end, let's get back to the start
    # let's also increment the counter before doing the check
    ++$count &gt; $#chars and $count = 0;

    # update the hash
    $self-&gt;{'spinner_count'} = $count;
}</pre>

<p>One nice thing we can add is printing a newline when the code finishes so your
terminal doesn't end up on the same line with the last printed character:</p>
<pre class="prettyprint">sub DESTROY {
    print STDERR "\n";
}</pre>

<p>And that's pretty much it.</p>
<p><i>(we're printing to STDERR to enforce pipe flushing)</i></p>
<h2><a name="cpan__anyone"></a>CPAN, anyone?</h2>

<p>While you've been reading this entry, I've taken the liberty to upload what we
just wrote to CPAN and it should now be available as
<a href="https://metacpan.org/module/Dancer::Logger::Spinner">Dancer::Logger::Spinner</a>. Nice, isn't it?</p>
<p>Feel free to send me your names so I could add you to the CREDITS section in the
POD! :)</p>
<h2><a name="see_also"></a>See also</h2>

<ul>
<li><a name="item_The_previous_article_on__i_Dancer_Internals__i_"></a><b>The previous article on <i>Dancer Internals</i></b>
</li>
<li><a name="item_The_previous_article_on__i_Writing_a_new_Dancer_serializer__i_"></a><b>The previous article on <i>Writing a new Dancer serializer</i></b>
</li>
<li><a name="item_The_following_article_on__i_Writing_a_new_Dancer_session_backend__i_"></a><b>The following article on <i>Writing a new Dancer session backend</i></b>
</li>
</ul>
<h2><a name="author"></a>Author</h2>

<p>This article has been written by Sawyer X <code>&lt;xsawyerx@cpan.org&gt;</code> for the
Perl Dancer Advent Calendar 2010.</p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
