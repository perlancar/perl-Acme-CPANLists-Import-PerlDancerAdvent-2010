<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Writing a new Dancer session backend | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2010" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2010">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="writing_a_new_dancer_session_backend"></a>Writing a new Dancer session backend</h1>

<p>Sessions are a crucial point in any smart web application and help maintain user
data across the website.</p>
<p>Various session backends exist for Dancer, but is there one that you wrote
yourself? Probably not. So, to help get you started, we're going to write one
together!</p>
<h2><a name="how_do_sessions_work"></a>How do sessions work?</h2>

<p>Sessions are basically storage compartments for the web programmer to store
anything he or she want to. You decide what to store, ranging from the user
details to calculated information.</p>
<p>Sessions can be stored inside browser cookies, Memcache or other mechanisms.</p>
<p>Dancer already has a few session backends, such as:</p>
<ul>
<li><a name="item_Simple"></a><b>Simple</b>
<p>A very simple in-memory session backend that allows you to save session data in
your memory. This helps when developing locally and allows you to clean all the
sessions on an application restart.</p>
<p>It also serves as a very quick proof-of-concept for Dancer session backends and
should be very easy to understand.</p>
</li>
<li><a name="item_Cookie"></a><b>Cookie</b>
<p>A pretty common way of saving user information, inside the browser's cookies.</p>
<p>Usually this is what you would use with your applications.</p>
<p><a href="https://metacpan.org/module/Dancer::Session::Cookie">Dancer::Session::Cookie</a> has a plus side of also being encrypted.</p>
</li>
<li><a name="item_Memcache"></a><b>Memcache</b>
<p>A more interesting approach that puts the session data inside a running Memcache
which allows all processes to access it, have it replicated or accessed very
quickly locally (or through a remote Memcache).</p>
</li>
<li><a name="item_MongoDB"></a><b>MongoDB</b>
<p>Even more interesting yet, saving the session data inside a MongoDB document,
providing some candy for the Document-DB audience out there. :)</p>
</li>
<li><a name="item_PSGI"></a><b>PSGI</b>
<p>The latest in PSGI-compatible technology, throwing all the session data handling
on to PSGI to handle it.</p>
</li>
</ul>
<h2><a name="deciding_on_the_session_backend"></a>Deciding on the session backend</h2>

<p>I'll admit it took me some thought on what kind of session backend would be
interesting for the article. At first I thought about having a backend that
creates funny ASCII art for every session. Then I considered writing one that
creates a directory structure of all the session data using <a href="https://metacpan.org/module/Data::Visitor">Data::Visitor</a> but
in the end I decided to pick something that could actually be used later.</p>
<p>Our session backend will be <a href="https://metacpan.org/module/KiokuDB">KiokuDB</a>, an advanced object store (document)
frontend written using <a href="https://metacpan.org/module/Moose">Moose</a>. Hey, what not? :)</p>
<h2><a name="module_skeleton"></a>Module skeleton</h2>

<p>The skeleton starts like this:</p>
<pre class="prettyprint">package Dancer::Session::KiokuDB;

use strict;
use warnings;
use Carp;
use base 'Dancer::Session::Abstract';

use KiokuDB;

# to have access to configuration data and a helper for paths
use Dancer::Logger;
use Dancer::Config    'setting';
use Dancer::FileUtils 'path';
use Dancer::ModuleLoader;

# ...

1;</pre>

<p>You'll notice we're using <a href="https://metacpan.org/module/Dancer::Session::Abstract">Dancer::Session::Abstract</a>, which helps us ensure we
implement the correct methods and helps us enforce present and future
portability with Dancer itself. It also makes our module object oriented.</p>
<p>KiokuDB works on backends and we're going to use <a href="https://metacpan.org/module/Dancer::ModuleLoader">Dancer::ModuleLoader</a> to
dynamically load these backend modules.</p>
<h2><a name="internal_variables"></a>Internal variables</h2>

<p>We're going to use two variables in the scope of the file:</p>
<ul>
<li><a name="item__code__db__code_"></a><b><code>$db</code></b>
<p>This variable will contain the KiokuDB database object.</p>
</li>
<li><a name="item__code__warned__code_"></a><b><code>$warned</code></b>
<p>We're going to depend on the user being able to specify any KiokuDB backend they
want, but we also want the user to have a default backend.</p>
<p>In case the user does not provide one, we're going to warn him before using our
default backend. However, we don't want to alert them <b>every</b> time they try to
work with the session backend - only once. So this variable will contain a
boolean of whether we've already warned the user before.</p>
</li>
</ul>
<pre class="prettyprint">my ( $db, $warned );</pre>

<h2><a name="methods"></a>Methods</h2>

<p>Next, for our session backend, we'll need to implement the following methods:</p>
<ul>
<li><a name="item_init"></a><b>init</b>
<p>This method initialises the session backend.</p>
<p>We'll use this method to lazily load any additional modules.</p>
<pre class="prettyprint">sub init {
    my $self    = shift;
    my $backend = setting('kiokudb_backend') || 'Hash';
    my $class   = "KiokuDB::Backend::$backend";
    my %opts    = ();

    # making sure that if we get backend opts, they're a hashref
    if ( my $opts = setting('kiokudb_backend_opts') ) {
        if ( ref $opts and ref $opts eq 'HASH' ) {
            %opts = %{$opts};
        } else {
            croak 'kiokudb_backend_opts must be a hash reference';
        }
    }

    # default is be to create
    defined $opts{'create'} or $opts{'create'} = 1;

    if ( not $warned ) {
        Dancer::Logger::warning("No session KiokuDB backend, using 'Hash'");
        $warned++;
    }

    Dancer::ModuleLoader-&gt;load($class)
        or croak "Cannot load $class: perhaps you need to install it?";

    $db = KiokuDB-&gt;new(
        backend       =&gt; $class-&gt;new(%opts),
        allow_classes =&gt; ['Dancer::Session::KiokuDB'],
    );
}</pre>

<p>We're loading a dynamic backend, creating a new KiokuDB instance with the
backend we loaded and options the user can give us. You'll notice we create
by default. This is valid for backends that support creating files (BDB, DBI,
etc.) and we've allowed basic recursive folding of our object using
<i>allow_classes</i>.</p>
<p><b>Important:</b> you should know that we're being very naive here by not providing
any special <a href="https://metacpan.org/module/KiokuDB::TypeMap">KiokuDB::TypeMap</a> for our class. This means that if someone will
use our KiokuDB session backend and try to store something KiokuDB does not know
how to cleanly fold (such as more complex objects), it might fail. Not to worry,
we'll document this behaviour in the POD. :)</p>
</li>
<li><a name="item_create"></a><b>create</b>
<p>This method creates a new session (hence the name) and returns an object of the
new session. We'll also flush new data to the KiokuDB backend using our
(yet-to-be-written) <code>flush</code> method.</p>
<pre class="prettyprint">sub create {
    my $class = shift;
    my $self  = $class-&gt;new;

    $self-&gt;flush;

    return $self;
}</pre>

</li>
<li><a name="item_retrieve"></a><b>retrieve</b>
<p>This method retrieves the session data. We're getting an ID to fetch and, using
KiokuDB, this method can't be easier:</p>
<pre class="prettyprint">sub retrieve {
    my ( $self, $id ) = @_;
    my $scope         = $db-&gt;new_scope;

    # return object
    return $db-&gt;lookup($id);
}</pre>

<p>We're creating a new scope (which KiokuDB requires) and then just looking up the
ID.</p>
</li>
<li><a name="item_destroy"></a><b>destroy</b>
<p>This method deletes the session object completely. Again, using KiokuDB, it's
just too easy.</p>
<pre class="prettyprint">sub destroy {
    my $self  = shift;
    my $scope = $db-&gt;new_scope;

    $db-&gt;delete($self);
}</pre>

</li>
<li><a name="item_flush"></a><b>flush</b>
<p>This method is in charge of <i>flushing</i> the data to the session storage.</p>
<pre class="prettyprint">sub flush {
    my $self  = shift;
    my $id    = $self-&gt;{'id'};
    my $scope = $db-&gt;new_scope;

    $db-&gt;insert( $id =&gt; $self );
}</pre>

<p>We're using an ID given in a hash key in the object as the ID for KiokuDB.</p>
</li>
</ul>
<h2><a name="cpan__anyone"></a>CPAN, anyone?</h2>

<p>While you've been reading this entry, I've taken the liberty to upload what we
just wrote to CPAN and it should now be available as
<a href="https://metacpan.org/module/Dancer::Session::KiokuDB">Dancer::Session::KiokuDB</a>. Nice, isn't it?</p>
<p>Feel free to send me your names so I could add you to the CREDITS section in the
POD! :)</p>
<h2><a name="see_also"></a>See also</h2>

<p>Previous articles</p>
<ul>
<li><a name="item__i_Dancer_Internals__i_"></a><b><i>Dancer Internals</i></b>
</li>
<li><a name="item__i_Writing_a_new_Dancer_serializer__i_"></a><b><i>Writing a new Dancer serializer</i></b>
</li>
<li><a name="item__i_Writing_a_new_Dancer_logger_backend__i_"></a><b><i>Writing a new Dancer logger backend</i></b>
</li>
</ul>
<h2><a name="author"></a>Author</h2>

<p>This article has been written by Sawyer X <code>&lt;xsawyerx@cpan.org&gt;</code> for the
Perl Dancer Advent Calendar 2010.</p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
